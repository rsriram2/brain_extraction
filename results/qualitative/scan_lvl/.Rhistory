"Eye/orbit injury",
"Corneal scar and opacity, unspecified" =
"Corneal scar/opacity",
"Fitting and adjustment of other specified devices" =
"Other device fitting",
"Gout, unspecified (Lower leg)" =
"Lower-leg gout",
"Melanoma in situ of upper limb, including shoulder" =
"Melanoma in situ (upper limb)",
"Connective and other soft tissue disorders of head, face and neck" =
"Soft tissue disorders (head/neck)",
"Other urethritis" =
"Urethritis",
"Spondylosis, unspecified (Multiple sites in spine)" =
"Spondylosis (spine)"
)
# 4) Subset, recode & order
df_sel <- df %>%
filter(predictor %in% interesting_preds) %>%
mutate(
label = recode(predictor, !!!short_names),
# keep the bars in the same order as interesting_preds:
label = factor(label, levels = rev(short_names[interesting_preds]))
)
ggbarplot(
df_sel,
x           = "label",
y           = "OR",
fill        = "#8B0000",     # deep red fill
color       = "white",       # white bar borders
palette     = "#8B0000",     # same as fill
sort.val    = "desc",        # sort bars by OR descending
sort.by.groups = FALSE,      # no grouping sort-within
x.text.angle = 90,           # rotate x labels vertical
rotate      = TRUE,
xlab        = "Predictor",# horizontal bar chart
ylab        = "Adjusted Odds Ratio",
ggtheme     = theme_minimal(base_size = 14) +
) +
library(readr)
library(dplyr)
library(ggplot2)
# 1) Read & compute OR
df <- read_csv("/Users/rushil/Downloads/univariate_logistic_results_final_0728_base.csv") %>%
mutate(OR = exp(beta))
# 2) Your 20 “interesting” predictors
interesting_preds <- c(
"Neutrophill count",
"Platelet crit",
"Eosinophill count",
"Other diseases of thymus",
"Prolapse & hernia of ovary/Fallopian tube",
"Mechanical complication of urinary‐organ graft",
"Melanoma in situ of ear and external auricular canal",
"Follow‐up care involving plastic surgery, unspecified",
"Ocular laceration and rupture with prolapse or loss of intraocular tissue",
"Fitting and adjustment of orthodontic device",
"Injury of other muscles and tendons at lower leg level",
"Hyphaema",
"Ulcerative (chronic) enterocolitis",
"Other specified disorders of bone (Ankle and foot)",
"Other injuries of eye and orbit",
"Corneal scar and opacity, unspecified",
"Fitting and adjustment of other specified devices",
"Gout, unspecified (Lower leg)",
"Melanoma in situ of upper limb, including shoulder",
"Connective and other soft tissue disorders of head, face and neck",
"Other urethritis",
"Spondylosis, unspecified (Multiple sites in spine)"
)
# 3) Map the long ICD names to short labels
short_names <- c(
"Neutrophill count" =
"Neutrophill count",
"Platelet crit" =
"Platelet crit",
"Eosinophill count" =
"Eosinophill count",
"Other diseases of thymus" =
"Thymus diseases",
"Prolapse & hernia of ovary/Fallopian tube" =
"Ovary/Fallopian hernia",
"Mechanical complication of urinary‐organ graft" =
"Urinary graft complication",
"Melanoma in situ of ear and external auricular canal" =
"Melanoma in situ (ear)",
"Follow‐up care involving plastic surgery, unspecified" =
"Plastic surgery follow-up",
"Ocular laceration and rupture with prolapse or loss of intraocular tissue" =
"Ocular laceration",
"Fitting and adjustment of orthodontic device" =
"Orthodontic device fitting",
"Injury of other muscles and tendons at lower leg level" =
"Lower-leg muscle/tendon injury",
"Hyphaema" =
"Hyphaema",
"Ulcerative (chronic) enterocolitis" =
"Ulcerative enterocolitis",
"Other specified disorders of bone (Ankle and foot)" =
"Ankle/foot bone disorders",
"Other injuries of eye and orbit" =
"Eye/orbit injury",
"Corneal scar and opacity, unspecified" =
"Corneal scar/opacity",
"Fitting and adjustment of other specified devices" =
"Other device fitting",
"Gout, unspecified (Lower leg)" =
"Lower-leg gout",
"Melanoma in situ of upper limb, including shoulder" =
"Melanoma in situ (upper limb)",
"Connective and other soft tissue disorders of head, face and neck" =
"Soft tissue disorders (head/neck)",
"Other urethritis" =
"Urethritis",
"Spondylosis, unspecified (Multiple sites in spine)" =
"Spondylosis (spine)"
)
# 4) Subset, recode & order
df_sel <- df %>%
filter(predictor %in% interesting_preds) %>%
mutate(
label = recode(predictor, !!!short_names),
# keep the bars in the same order as interesting_preds:
label = factor(label, levels = rev(short_names[interesting_preds]))
)
ggbarplot(
df_sel,
x           = "label",
y           = "OR",
fill        = "#8B0000",     # deep red fill
color       = "white",       # white bar borders
palette     = "#8B0000",     # same as fill
sort.val    = "desc",        # sort bars by OR descending
sort.by.groups = FALSE,      # no grouping sort-within
x.text.angle = 90,           # rotate x labels vertical
rotate      = TRUE,
xlab        = "Predictor",# horizontal bar chart
ylab        = "Adjusted Odds Ratio",
ggtheme     = theme_minimal(base_size = 14)
) +
# put the OR axis on a log scale if you like:
scale_y_log10(
breaks = c(0.1,0.25,0.5,1,2,5,10,25,50),
labels = scales::comma_format(accuracy = 0.1)
)
library(readr)
library(dplyr)
library(tidyr)
library(ggpubr)    # for ggbarplot()
library(ggplot2)
# —── 1) load the SD lookup you saved from Python —
# this CSV must have two columns: predictor, sd
sd_lookup <- read_csv(
"/Volumes/bolton/Active/Users/RushilSrirambhatla/blood_count_sds.csv"
)
# the three continuous lab predictors we want per–SD ORs for:
cont_vars <- c(
"Neutrophill count",
"Platelet crit",
"Eosinophill count"
)
# —── 2) read your univariate betas & compute OR_unit —
df <- read_csv(
"/Users/rushil/Downloads/univariate_logistic_results_final_0728_base.csv"
) %>%
mutate(
OR_unit = exp(beta)
) %>%
# —── 3) join in the SDs —
left_join(sd_lookup, by = "predictor") %>%
# —── 4) build the final OR column: per-1SD for labs, per-unit for ICD flags —
mutate(
OR = if_else(
predictor %in% cont_vars,
OR_unit ^ sd,   # equivalent to exp(beta * sd)
OR_unit         # leave ICD flags unchanged
)
)
rlang::last_trace()
library(readr)
library(dplyr)
library(ggpubr)    # for ggbarplot()
# —── 1) read your SD lookup, forcing the col-names to predictor + sd —
sd_lookup <- read_csv(
"/Volumes/bolton/Active/Users/RushilSrirambhatla/blood_count_sds.csv",
col_names = c("predictor","sd"),
skip      = 1
)
# check
print(sd_lookup)
# # A tibble: 3 × 2
#   predictor              sd
#   <chr>              <dbl>
# 1 Neutrophill count   1.41
# 2 Platelet crit       0.0489
# 3 Eosinophill count   0.138
# your three continuous labs
cont_vars <- c("Neutrophill count","Platelet crit","Eosinophill count")
# —── 2) read your univariate results and compute per-unit OR —
df <- read_csv(
"/Users/rushil/Downloads/univariate_logistic_results_final_0728_base.csv"
) %>%
mutate(OR_unit = exp(beta)) %>%
# —── 3) join in the SDs —
left_join(sd_lookup, by = "predictor") %>%
# —── 4) build final OR: per-1 SD for labs, per-unit for ICD flags —
mutate(
OR = if_else(
predictor %in% cont_vars,
OR_unit ^ sd,   # exp(beta) ^ sd  == exp(beta * sd)
OR_unit
)
)
# Install/load required packages
# install.packages(c("readr","dplyr","ggpubr","ggplot2"))
library(readr)
library(dplyr)
library(ggpubr)
library(ggplot2)
# 1) Read in the SD lookup for your three continuous blood counts
#    (the first row of the CSV is a blank header so we skip it and supply our own col names)
sd_lookup <- read_csv(
"/Volumes/bolton/Active/Users/RushilSrirambhatla/blood_count_sds.csv",
col_names = c("predictor", "sd"),
skip      = 1
)
# 2) Define which predictors should be treated as "per-1 SD" rather than "per-unit"
cont_vars <- c(
"Neutrophill count",
"Platelet crit",
"Eosinophill count"
)
# 3) Read your univariate logistic‐regression results
df <- read_csv(
"/Users/rushil/Downloads/univariate_logistic_results_final_0728_base.csv"
) %>%
# compute the "per-unit" odds‐ratio
mutate(OR_unit = exp(beta)) %>%
# join in the SDs
left_join(sd_lookup, by = "predictor") %>%
# build the final OR: per-1 SD for labs, per-unit for ICD flags
mutate(
OR = if_else(
predictor %in% cont_vars,
OR_unit ^ sd,  # same as exp(beta * sd)
OR_unit
)
)
# 4) Pick out your 20 "interesting" predictors
interesting_preds <- c(
"Neutrophill count",
"Platelet crit",
"Eosinophill count",
"Other diseases of thymus",
"Prolapse & hernia of ovary/Fallopian tube",
"Mechanical complication of urinary‐organ graft",
"Melanoma in situ of ear and external auricular canal",
"Follow‐up care involving plastic surgery, unspecified",
"Ocular laceration and rupture with prolapse or loss of intraocular tissue",
"Fitting and adjustment of orthodontic device",
"Injury of other muscles and tendons at lower leg level",
"Hyphaema",
"Ulcerative (chronic) enterocolitis",
"Other specified disorders of bone (Ankle and foot)",
"Other injuries of eye and orbit",
"Corneal scar and opacity, unspecified",
"Fitting and adjustment of other specified devices",
"Gout, unspecified (Lower leg)",
"Melanoma in situ of upper limb, including shoulder",
"Connective and other soft tissue disorders of head, face and neck",
"Other urethritis",
"Spondylosis, unspecified (Multiple sites in spine)"
)
# 5) Provide shorter labels for plotting
short_names <- c(
"Neutrophill count" =
"Neutrophill count",
"Platelet crit"     =
"Platelet crit",
"Eosinophill count" =
"Eosinophill count",
"Other diseases of thymus" =
"Thymus diseases",
"Prolapse & hernia of ovary/Fallopian tube" =
"Ovary/Fallopian hernia",
"Mechanical complication of urinary‐organ graft" =
"Urinary graft complication",
"Melanoma in situ of ear and external auricular canal" =
"Melanoma in situ (ear)",
"Follow‐up care involving plastic surgery, unspecified" =
"Plastic surgery follow-up",
"Ocular laceration and rupture with prolapse or loss of intraocular tissue" =
"Ocular laceration",
"Fitting and adjustment of orthodontic device" =
"Orthodontic device fitting",
"Injury of other muscles and tendons at lower leg level" =
"Lower-leg muscle/tendon injury",
"Hyphaema" =
"Hyphaema",
"Ulcerative (chronic) enterocolitis" =
"Ulcerative enterocolitis",
"Other specified disorders of bone (Ankle and foot)" =
"Ankle/foot bone disorders",
"Other injuries of eye and orbit" =
"Eye/orbit injury",
"Corneal scar and opacity, unspecified" =
"Corneal scar/opacity",
"Fitting and adjustment of other specified devices" =
"Other device fitting",
"Gout, unspecified (Lower leg)" =
"Lower-leg gout",
"Melanoma in situ of upper limb, including shoulder" =
"Melanoma in situ (upper limb)",
"Connective and other soft tissue disorders of head, face and neck" =
"Soft tissue disorders (head/neck)",
"Other urethritis" =
"Urethritis",
"Spondylosis, unspecified (Multiple sites in spine)" =
"Spondylosis (spine)"
)
# 6) Subset, recode predictor → label, and preserve your desired order
df_sel <- df %>%
filter(predictor %in% interesting_preds) %>%
mutate(
label = recode(predictor, !!!short_names),
label = factor(label, levels = rev(short_names[interesting_preds]))
)
# 7) Plot: per-1 SD OR for blood counts, per-unit OR for flags
ggbarplot(
df_sel,
x              = "label",
y              = "OR",
fill           = "#8B0000",     # deep red
color          = "white",       # white border on bars
palette        = "#8B0000",     # same red for any grouping
sort.val       = "desc",        # sort bars by OR descending
sort.by.groups = FALSE,
x.text.angle   = 90,
rotate         = TRUE,
xlab           = "Predictor",
ylab           = "Adjusted Odds\nRatio\n(blood counts = per 1 SD)",
ggtheme        = theme_minimal(base_size = 14)
) +
scale_y_log10(
breaks = c(0.1, 0.25, 0.5, 1, 2, 5, 10, 25, 50),
labels = scales::comma_format(accuracy = 0.1)
) +
theme(
plot.title       = element_text(face = "bold", hjust = 0.5),
axis.title.y     = element_text(margin = margin(r = 10)),
panel.grid.major.y = element_blank()
)
ggbarplot(
df_sel,
x              = "label",
y              = "OR",
fill           = "#8B0000",
color          = "white",
palette        = "#8B0000",
sort.val       = "desc",
sort.by.groups = FALSE,
x.text.angle   = 90,
rotate         = TRUE,
xlab           = "Predictor",
ylab           = "Adjusted Odds Ratio\n(blood counts = per 1 SD)",
ggtheme        = theme_minimal(base_size = 14)
) +
scale_y_log10(
breaks = c(0.1, 0.25, 0.5, 1, 2, 5, 10, 25, 50),
labels = scales::comma_format(accuracy = 0.1)
)
ggbarplot(
df_sel,
x              = "label",
y              = "OR",
fill           = "#8B0000",
color          = "white",
palette        = "#8B0000",
sort.val       = "desc",
sort.by.groups = FALSE,
x.text.angle   = 90,
rotate         = TRUE,
xlab           = "Predictor",
ylab           = "Adjusted Odds Ratio",
ggtheme        = theme_minimal(base_size = 14)
) +
scale_y_log10(
breaks = c(0.1, 0.25, 0.5, 1, 2, 5, 10, 25, 50),
labels = scales::comma_format(accuracy = 0.1)
)
getwd
getwd()
setwd("/Users/rushil/ichseg/local_results/scan_lvl")
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(showtext)
library(sysfonts)
font_add(
family  = "CMU Serif",
regular = "/Users/rushil/Downloads/cmu-serif/cmunrm.ttf",
bold    = "/Users/rushil/Downloads/cmu-serif/cmunbx.ttf"
)
showtext_auto()
showtext_opts(dpi = 300)  # good for consistent sizing in saved outputs
# --- Load updated QC CSVs ---
overall   <- read.csv("/Users/rushil/ichseg/local_results/scan_lvl/Rushil_QC_results.csv")
artifact  <- read.csv("/Users/rushil/ichseg/local_results/scan_lvl/Rushil_QC_artifact_results.csv")
craniot   <- read.csv("/Users/rushil/ichseg/local_results/scan_lvl/Rushil_QC_craniotomy_results.csv")
cta       <- read.csv("/Users/rushil/ichseg/local_results/scan_lvl/Rushil_QC_cta_results.csv")
# Greyscale fills, consistent with prior figures
fill_methods <- c(
"v1"         = "#444448",
"robust"     = "#666666",
"synthstrip" = "#888888",
"hdctbet"    = "#AAAAAA",
"ctbet"      = "#CCCCCC",
"brainchop"  = "#EEEEEE",
"dockerctbet" = "#DDDDDD"
)
fill_labels <- c(
"v1"         = "CTBET",
"robust"     = "Robust-CTBET",
"synthstrip" = "SynthStrip",
"hdctbet"    = "HD-CTBET",
"ctbet"      = "CT_BET",
"brainchop"  = "Brainchop",
"dockerctbet"= "CTbet-Docker"
)
# Helper theme (Computer Modern look if showtext is enabled)
theme_cm <- theme_minimal(base_size = 14, base_family = "CMU Serif") +
theme(
panel.grid.major.x = element_line(color = "grey80"),
panel.grid.major.y = element_line(color = "grey80"),
panel.grid.minor   = element_blank(),
axis.line.x        = element_line(color = "black"),
axis.ticks.x       = element_line(color = "black"),
axis.line.y        = element_blank(),
axis.title.x       = element_text(face = "bold", margin = margin(t = 10)),
axis.title.y       = element_text(face = "bold", margin = margin(r = 10)),
axis.text.x        = element_text(size = 12, color = "black"),
axis.text.y        = element_text(size = 12, color = "black"),
legend.position    = "bottom",
legend.text        = element_text(size = 12)
)
fill_methods_std <- setNames(unname(fill_methods[names(fill_labels)]), fill_labels)
# ========== FIGURE A: Overall (single-pass) failure rates by method ==========
overall2 <- overall %>%
arrange(Total_Failure_Rate) %>%
mutate(
Method = factor(Method, levels = Method),
Method = recode(Method, !!!fill_labels)  # now Method has new names
)
pA <- ggplot(overall2, aes(x = Method, y = Total_Failure_Rate, fill = Method)) +
geom_hline(yintercept = 0, color = "black") +
geom_col(width = 0.6, color = "black", size = 0.8, alpha = 0.9) +
geom_text(aes(label = sprintf("%.2f", Total_Failure_Rate)),
vjust = -0.3, fontface = "bold", size = 5, family = "CMU Serif") +
scale_fill_manual(values = fill_methods_std, guide = "none") +   # <-- use std
scale_y_continuous(expand = expansion(add = c(0, 5)), breaks = pretty_breaks(10)) +
labs(x = "Method", y = "Exclusion Rate (%)") +
theme_cm +
theme(axis.text.x = element_text(face = "bold"))
ggsave("figureA_overall_exclusion_rates.pdf", pA, width = 12, height = 6, units = "in", dpi = 300, device = cairo_pdf)
method_order <- overall %>% arrange(Total_Failure_Rate) %>% pull(Method)
tasks_long <- overall %>%
transmute(
Method,
Registration = Registration_Rate,
Volumetrics  = Volumetrics_Rate,
`Deep-Learning` = DL_Rate
) %>%
pivot_longer(-Method, names_to = "Task", values_to = "Rate") %>%
mutate(
Method = factor(Method, levels = method_order),
Method = recode(Method, !!!fill_labels),   # <-- display names on x-axis
Task   = factor(Task, levels = c("Registration","Volumetrics","Deep-Learning"))
)
pB <- ggplot(tasks_long, aes(x = Method, y = Rate, fill = Task)) +
geom_hline(yintercept = 0, color = "black") +
geom_col(position = position_dodge(width = 0.7), width = 0.6,
color = "black", size = 0.8, alpha = 0.9) +
geom_text(aes(label = sprintf("%.2f", Rate)),
position = position_dodge(width = 0.7), vjust = -0.35,
fontface = "bold", size = 3, family = "CMU Serif") +
scale_fill_manual(values = fill_tasks, name = NULL) +   # <-- no fill_labels here
scale_y_continuous(expand = expansion(add = c(0, 5)), breaks = pretty_breaks(8)) +
labs(x = "Method", y = "Exclusion Rate (%)") +
theme_cm +
theme(axis.text.x = element_text(face = "bold"))
pB
history
history
fill_tasks <- c(
"Registration"   = "#444444",  # dark gray
"Volumetrics"    = "#888888",  # medium gray
"Deep-Learning"  = "#CCCCCC"   # light gray
)
pB <- ggplot(tasks_long, aes(x = Method, y = Rate, fill = Task)) +
geom_hline(yintercept = 0, color = "black") +
geom_col(position = position_dodge(width = 0.7), width = 0.6,
color = "black", size = 0.8, alpha = 0.9) +
geom_text(aes(label = sprintf("%.2f", Rate)),
position = position_dodge(width = 0.7), vjust = -0.35,
fontface = "bold", size = 3, family = "CMU Serif") +
scale_fill_manual(values = fill_tasks, name = NULL) +   # <-- no fill_labels here
scale_y_continuous(expand = expansion(add = c(0, 5)), breaks = pretty_breaks(8)) +
labs(x = "Method", y = "Exclusion Rate (%)") +
theme_cm +
theme(axis.text.x = element_text(face = "bold"))
ggsave("figureB_task_exclusion_rates.pdf", pB, width = 12, height = 6, units = "in", dpi = 300, device = cairo_pdf)
